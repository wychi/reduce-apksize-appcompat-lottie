apply plugin: 'com.android.application'

String SDK_DIR = System.getenv("ANDROID_HOME")
if (SDK_DIR == null) {
    Properties props = new Properties()
    props.load(new FileInputStream(project.rootProject.file("local.properties")))
    SDK_DIR = props.get('sdk.dir');
}
String AAPT_BIN = "${SDK_DIR}/build-tools/25.0.2/aapt"

def removeEntity(targetXmlFile, refXmlFile) {
    println "removeEntity " + targetXmlFile + " " + refXmlFile

    //def srcValues = file("${projectDir}/buildconf/values.xml")
    def xml = new XmlParser().parse(targetXmlFile)
    def refXml = new XmlParser().parse(refXmlFile)
    def keepKeys = ['AppCompatImageView', 'ViewBackgroundHelper', "abc_text_size_menu_material", "abc_progress_bar_height_material"]
    def keys = ["TextAppearance.ActionButton"]
    refXml.each {
        keys.push(it.@name)
    }
    def nodeToDelete = []
    xml.each {
        def key = it.@name
        if(keys.contains(key) && !keepKeys.contains(key))
            nodeToDelete.push(it);
    }
    nodeToDelete.each {
        println it.@name;
        xml.remove(it);
    }

    targetXmlFile.withWriter { out ->
        def printer = new XmlNodePrinter( new PrintWriter(out) )
        printer.preserveWhitespace = true
        printer.print( xml )
    }
}


android {
    compileSdkVersion 25
    buildToolsVersion "25.0.2"
    defaultConfig {
        applicationId "cms.appcompatmin"
        minSdkVersion 14
        targetSdkVersion 17
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        resConfigs "en"
    }


    signingConfigs {
        release {
            try {
                storeFile file("../keystore test/release.keystore")
                storePassword "testres"
                keyAlias "testres"
                keyPassword "testres"
            } catch (ex) {
                throw new InvalidUserDataException(ex.toString())
            }
        }

        debug {
            storeFile file("../keystore test/debug.keystore")
        }
    }


    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }

    applicationVariants.all { variant ->
        String finalBuildName = variant.name.capitalize()
        def processResTask = tasks.findByName("process${finalBuildName}Resources");
        def mergeResTask = tasks.findByName("merge${finalBuildName}Resources");

        // RUN BEFORE AAPT
        // NOTE: remove files will cause AAPT fail. (replace instead)
        // replace unwanted layout before aapt-rules.txt is generated.
        mergeResTask.doLast {
            def dummyLayout = file("$projectDir/buildconf/dummy_layout.xml");
            def UNNEDDED_FILE_LIST = "$projectDir/buildconf/UNNEEDED_IMAGE_RESOURCE_FILES.txt"
            File unneededFileList = new File(UNNEDDED_FILE_LIST)
            if (unneededFileList.exists()) {
                unneededFileList.eachLine { line ->
                    if (!line.startsWith("#") && line.trim()) {

                        def unneededRes = file("${buildDir}/intermediates/res/merged/${variant.flavorName}/${variant.buildType.name}/${line}")
                        if(!unneededRes.exists()) {
                            println "mismatch. update UNNEEDED_IMAGE_RESOURCE_FILES accordingly. ${line}"
                            return
                        }

                        if(line.endsWith(".xml")) {
                            def input = dummyLayout.newDataInputStream()
                            def output = unneededRes.newDataOutputStream()
                            output << input
                            input.close()
                            output.close()
                        } else {
                            task("delete${line}", type: Delete) {
                                delete unneededRes
                            }.execute()
                        }

                        // NOTE: delete xml/png files here will cause runtime error
                        // ex: android.support.v7.widget.AppCompatDrawableManager.COLORFILTER_TINT_COLOR_CONTROL_NORMAL
                        if(line.endsWith(".xml")) {
                            task("delete${line}", type: Delete) {
                                delete file("/home/wychi/repository/AppCompatMin/app/build/intermediates/res/merged/release/${line}")
                            }.execute()
                        }
                    }
                }
            }

            println "modify values"

            def allmergedXml = file("${buildDir}/intermediates/res/merged/${variant.name}/values/values.xml")
            def appCompatXml = file('/home/wychi/.android/build-cache/7047835bd2b3810f7b80962569d079e9c1fb9b06/output/res/values/values.xml');
            removeEntity(allmergedXml, appCompatXml)

            def versions = ["hdpi-v4", "large-v4", "night-v8", "v11", "v12", "v14", "v17", "v21", "v22", "v23", "v24", "v25"];
            versions.each{ v ->
                def mergedXml = file("${buildDir}/intermediates/res/merged/${variant.name}/values-${v}/values-${v}.xml")
                appCompatXml = file("/home/wychi/.android/build-cache/79ccfb00ca33509e60e92b311255a6aee394f7b9/output/res/values-${v}/values-${v}.xml")
                removeEntity(allmergedXml, appCompatXml)
                removeEntity(mergedXml, appCompatXml)
            }
        }

        processResTask.doLast {
            def UNNEDDED_FILE_LIST = "$projectDir/buildconf/UNNEEDED_IMAGE_RESOURCE_FILES.txt"
            File unneededFileList = new File(UNNEDDED_FILE_LIST)
            if (unneededFileList.exists()) {
                unneededFileList.eachLine { line ->
                    if(line.startsWith("#") )
                        line = line.substring(1)
                    if (line.trim()) {

                        Task removeResTask = task("remove-${finalBuildName}-${line}", type: Exec) {
                            ignoreExitValue true
                            workingDir "${projectDir}"
                            println "[LOG] Remove Res ${line} from apk ${processResTask.getPackageOutputFile().absolutePath}"
                            commandLine "${AAPT_BIN}", "r", "${processResTask.getPackageOutputFile().absolutePath}", "res/${line}"
                        }
                        removeResTask.execute()
                    }
                }
            }

        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
//    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
//        exclude group: 'com.android.support', module: 'support-annotations'
//    })
    compile 'com.android.support:appcompat-v7:25.3.0'
    compile 'com.airbnb.android:lottie:1.5.3'
//    testCompile 'junit:junit:4.12'
}


buildscript {
    repositories {
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        //classpath 'com.tencent.mm:AndResGuard-gradle-plugin:1.1.16'
        classpath "gradle.plugin.com.google.gradle:osdetector-gradle-plugin:1.4.0"
        classpath files('AndResGuard-core.jar')
        classpath files('AndResGuard-gradle-plugin.jar')
    }
}

apply plugin: 'AndResGuard'
andResGuard {
    mappingFile = null //file("./resource_mapping.txt")
    use7zip = false
    useSign = true
    whiteList = [
            "R.id.*",
            "R.drawable.*",
            "R.dimen.*"
            ]
}
